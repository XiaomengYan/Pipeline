mu2.v = rcauchy(200,location = 0,scale = 1)
p.v = rbeta(300,shape1 = 2,shape2 = 2)
llh = rep(0,300)
for (i in c(1:300)){
llh[i] = mix_fun(p.v,mu1.v,mu2.v)
}
mu1.v = rcauchy(300,location = 0, scale = 1)
mu2.v = rcauchy(200,location = 0,scale = 1)
p.v = rbeta(300,shape1 = 2,shape2 = 2)
llh = rep(0,300)
for (i in c(1:300)){
llh[i] = mix_fun(p.v[i],mu1.v[i],mu2.v[i])
}
output = mean(llh)
mean(llh)
llh
i=1
mu1.v = rcauchy(300,location = 0, scale = 1)
mu2.v = rcauchy(300,location = 0,scale = 1)
p.v = rbeta(300,shape1 = 2,shape2 = 2)
llh = rep(0,300)
for (i in c(1:300)){
llh[i] = mix_fun(p.v[i],mu1.v[i],mu2.v[i])
}
output = mean(llh)
mean(llh)
as.numeric(p.v>0 && p.v<1)
p.v
p[p>0]
p.v[p.v>0]
p.v[p.v<1]
p.v>0 && p.v<1
as.numeric(p.v>0 && p.v<1)
dcauchy()
?dcauchy
mu1.v = rcauchy(300,location = 0, scale = 1)
mu2.v = rcauchy(300,location = 0,scale = 1)
p.v = rbeta(300,shape1 = 2,shape2 = 2)
llh = rep(0,300)
for (i in c(1:300)){
llh[i] = mix_fun(p.v[i],mu1.v[i],mu2.v[i])*dnorm(mu1.v[i])*dnorm(mu2.v[i])*as.numeric(p.v[i]>0 && p.v[i]<1)/(dcauchy(mu1.v[i])*dcauchy(mu2.v[i])*dbeta(p.v[i],shape1 = 2,shape2 = 2))
}
output = mean(llh)
output
i=1
mix_fun(p.v[i],mu1.v[i],mu2.v[i])*dnorm(mu1.v[i])
dnorm(mu2.v[i])*as.numeric(p.v[i]>0 && p.v[i]<1)
(dcauchy(mu1.v[i])*dcauchy(mu2.v[i])*dbeta(p.v[i],shape1 = 2,shape2 = 2))
mu1.v
(dcauchy(mu1.v[i])*dcauchy(mu2.v[i])*dbeta(p.v[i],shape1 = 2,shape2 = 2))
*dnorm(mu1.v[i])*dnorm(mu2.v[i])*as.numeric(p.v[i]>0&&p.v[i]<1)
llh[i] = mix_fun(p.v[i],mu1.v[i],mu2.v[i])*dnorm(mu1.v[i])*dnorm(mu2.v[i])/(dcauchy(mu1.v[i])*dcauchy(mu2.v[i])*dbeta(p.v[i],shape1 = 2,shape2 = 2))
i=1
llh[i] = mix_fun(p.v[i],mu1.v[i],mu2.v[i])*dnorm(mu1.v[i])*dnorm(mu2.v[i])/(dcauchy(mu1.v[i])*dcauchy(mu2.v[i])*dbeta(p.v[i],shape1 = 2,shape2 = 2))
## function to calculate the likelihood
## Input: p, mu1,mu2
## Output: likelihood value
mix_fun = function(p,mu1,mu2){
dat = c(0.3923, 2.2377, -2.5336, 2.5622, 1.4784, 2.0188, -1.7574, -0.5588, 0.6694, 3.533)
l=1
for (i in c(1:length(dat))){
tmp = p*dnorm(dat[i],mean = mu1,sd = 1)+(1-p)*dnorm(dat[i],mean = mu2, sd = 1)
l=l*tmp
}
return(l)
}
## Since p,mu1,mu2 are independent, we generate the sample independently
mu1.v = rcauchy(300,location = 0, scale = 1)
mu2.v = rcauchy(300,location = 0,scale = 1)
p.v = rbeta(300,shape1 = 2,shape2 = 2)
llh = rep(0,300)
for (i in c(1:300)){
llh[i] = mix_fun(p.v[i],mu1.v[i],mu2.v[i])*dnorm(mu1.v[i])*dnorm(mu2.v[i])/(dcauchy(mu1.v[i])*dcauchy(mu2.v[i])*dbeta(p.v[i],shape1 = 2,shape2 = 2))
}
output = mean(llh)
n=500
mu1.v = rcauchy(n,location = 0, scale = 1)
mu2.v = rcauchy(n,location = 0,scale = 1)
p.v = rbeta(n,shape1 = 2,shape2 = 2)
llh = rep(0,n)
for (i in c(1:n)){
llh[i] = mix_fun(p.v[i],mu1.v[i],mu2.v[i])*dnorm(mu1.v[i])*dnorm(mu2.v[i])/(dcauchy(mu1.v[i])*dcauchy(mu2.v[i])*dbeta(p.v[i],shape1 = 2,shape2 = 2))
}
mean(llh)
n=10000
mu1.v = rcauchy(n,location = 0, scale = 1)
mu2.v = rcauchy(n,location = 0,scale = 1)
p.v = rbeta(n,shape1 = 2,shape2 = 2)
llh = rep(0,n)
for (i in c(1:n)){
llh[i] = mix_fun(p.v[i],mu1.v[i],mu2.v[i])*dnorm(mu1.v[i])*dnorm(mu2.v[i])/(dcauchy(mu1.v[i])*dcauchy(mu2.v[i])*dbeta(p.v[i],shape1 = 2,shape2 = 2))
}
mean(llh)
n=1000
mu1.v = rcauchy(n,location = 0, scale = 1)
mu2.v = rcauchy(n,location = 0,scale = 1)
p.v = rbeta(n,shape1 = 2,shape2 = 2)
llh = rep(0,n)
for (i in c(1:n)){
llh[i] = mix_fun(p.v[i],mu1.v[i],mu2.v[i])*dnorm(mu1.v[i])*dnorm(mu2.v[i])/(dcauchy(mu1.v[i])*dcauchy(mu2.v[i])*dbeta(p.v[i],shape1 = 2,shape2 = 2))
}
mean(llh)
sapply(theta,llh)
llh = function(theta){
return(exp(20*1.65*abs(theta)-10*theta^2))
}
se
llh = function(theta){
return(exp(20*1.65*abs(theta)-10*theta^2))
}
theta = rnorm(1000)
sapply(theta,llh)
norm_sum = sum(sapply(theta,llh))
sum(sapply(theta,llh))
i=1
llh(theta[i])
w[i]=llh(theta[i])/norm_sum
llh(theta[i])/norm_sum
?sample
??samplling
i=2
sapply(theta,llh)
?sample
sample(theta,300,replace = TRUE,prob = w)
w = rep(0,1000)
norm_sum = sum(sapply(theta,llh))
for(i in  c(1:100)){
w[i]=llh(theta[i])/norm_sum
}
sample(theta,300,replace = TRUE,prob = w)
hist(dat)
dat = sample(theta,1000,prob = w)
dat = sample(theta,100,prob = w)
dat = sample(theta,500,prob = w)
dat = sample(theta,300,prob = w)
dat = sample(theta,300,prob = w)
norm_sum = sum(sapply(theta,llh))
for(i in  c(1:1000)){
w[i]=llh(theta[i])/norm_sum
}
dat = sample(theta,500,prob = w)
hist(dat)
llh = function(theta){
return(exp(20*1.65*abs(theta)-10*theta^2))
}
set.seed(20170322)
theta = rnorm(1000)
w = rep(0,1000)
norm_sum = sum(sapply(theta,llh))
for(i in  c(1:1000)){
w[i]=llh(theta[i])/norm_sum
}
dat = sample(theta,500,prob = w)
hist(dat,by = 10)
?hist
llh = function(theta){
return(exp(20*1.65*abs(theta)-10*theta^2))
}
set.seed(20170322)
theta = rnorm(1000)
w = rep(0,1000)
norm_sum = sum(sapply(theta,llh))
for(i in  c(1:1000)){
w[i]=llh(theta[i])/norm_sum
}
dat = sample(theta,500,prob = w)
hist(dat,breaks = 1)
llh = function(theta){
return(exp(20*1.65*abs(theta)-10*theta^2))
}
set.seed(20170322)
theta = rnorm(1000)
w = rep(0,1000)
norm_sum = sum(sapply(theta,llh))
for(i in  c(1:1000)){
w[i]=llh(theta[i])/norm_sum
}
dat = sample(theta,500,prob = w)
hist(dat,breaks = 0.01)
llh = function(theta){
return(exp(20*1.65*abs(theta)-10*theta^2))
}
set.seed(20170322)
theta = rnorm(1000)
w = rep(0,1000)
norm_sum = sum(sapply(theta,llh))
for(i in  c(1:1000)){
w[i]=llh(theta[i])/norm_sum
}
dat = sample(theta,500,prob = w)
hist(dat,breaks = 0.1)
llh = function(theta){
return(exp(20*1.65*abs(theta)-10*theta^2))
}
set.seed(20170322)
theta = rnorm(1000)
w = rep(0,1000)
norm_sum = sum(sapply(theta,llh))
for(i in  c(1:1000)){
w[i]=llh(theta[i])/norm_sum
}
dat = sample(theta,500,prob = w)
hist(dat)
llh = function(theta){
return(exp(20*1.65*abs(theta)-10*theta^2))
}
set.seed(20170322)
theta = rnorm(1000)
w = rep(0,1000)
norm_sum = sum(sapply(theta,llh))
for(i in  c(1:1000)){
w[i]=llh(theta[i])/norm_sum
}
dat = sample(theta,500,prob = w)
hist(dat,0.1)
llh = function(theta){
return(exp(20*1.65*abs(theta)-10*theta^2))
}
set.seed(20170322)
theta = rnorm(1000)
w = rep(0,1000)
norm_sum = sum(sapply(theta,llh))
for(i in  c(1:1000)){
w[i]=llh(theta[i])/norm_sum
}
dat = sample(theta,500,prob = w)
hist(dat,breaks = 1)
?hist
llh = function(theta){
return(exp(20*1.65*abs(theta)-10*theta^2))
}
set.seed(20170322)
theta = rnorm(1000)
w = rep(0,1000)
norm_sum = sum(sapply(theta,llh))
for(i in  c(1:1000)){
w[i]=llh(theta[i])/norm_sum
}
dat = sample(theta,500,prob = w)
hist(dat,breaks = 100)
llh = function(theta){
return(exp(20*1.65*abs(theta)-10*theta^2))
}
set.seed(20170322)
theta = rnorm(1000)
w = rep(0,1000)
norm_sum = sum(sapply(theta,llh))
for(i in  c(1:1000)){
w[i]=llh(theta[i])/norm_sum
}
dat = sample(theta,500,prob = w)
hist(dat,breaks = 50)
Rcpp::sourceCpp('Dropbox/project/waveletspine/waveletspline/test/testGSL.cpp')
Rcpp::sourceCpp('Dropbox/project/waveletspine/waveletspline/test/testGSL.cpp')
Rcpp::sourceCpp('Dropbox/project/waveletspine/waveletspline/test/evalBsplineMatrix.cpp')
xSeq = seq(0,56, length.out = 1000)
coeff = sapply(xSeq,GenSpline,3,0,1)
plot(xSeq,coeff)
xSeq = seq(0,56, length.out = 1000)
coeff = sapply(xSeq,GenSpline,4,0,1)
plot(xSeq,coeff)
xSeq = seq(0,56, length.out = 1000)
coeff = sapply(xSeq,GenSpline,4,0,10)
plot(xSeq,coeff)
xSeq = seq(0,56, length.out = 1000)
coeff = sapply(xSeq,GenSpline,1,0,10)
plot(xSeq,coeff)
xSeq = seq(0,56, length.out = 1000)
coeff = sapply(xSeq,GenSpline,0,0,10)
plot(xSeq,coeff)
Rcpp::sourceCpp('Dropbox/project/waveletspine/waveletspline/test/evalBsplineMatrix.cpp')
set_Bspline_parameter(1,9,2,4)
set_Bspline_parameter(1,9,2,2)
set_Bspline_parameter(1,9,2,1)
set_Bspline_parameter(1,200,2,1)
set_Bspline_parameter(1,200,2,3)
set_Bspline_parameter(1,200,2,9)
Rcpp::sourceCpp('Dropbox/project/waveletspine/waveletspline/test/evalBsplineMatrix.cpp')
Rcpp::sourceCpp('Dropbox/project/waveletspine/waveletspline/test/evalBsplineMatrix.cpp')
compute_spline(2,0,100,2,4)
Rcpp::sourceCpp('Dropbox/project/waveletspine/waveletspline/test/evalBsplineMatrix.cpp')
compute_spline((1,0,100,1,2))
compute_spline(1,0,100,1,2)
Rcpp::sourceCpp('Dropbox/project/waveletspine/waveletspline/test/evalBsplineMatrix.cpp')
compute_spline(10,1,100,1,2)
compute_spline(10,1,100,1,3)
compute_spline(10,1,100,4,3)
Rcpp::sourceCpp('Dropbox/project/waveletspine/waveletspline/test/evalBsplineMatrix.cpp')
Rcpp::sourceCpp('Dropbox/project/waveletspine/waveletspline/test/testGSL2.cpp')
Rcpp::sourceCpp('Dropbox/project/waveletspine/waveletspline/test/evalBsplineMatrix.cpp')
compute_spline(10,1,100,4,3)
pnorm(2.01,0,1,lower.tail = FALSE)
pnorm(2.01,0,1,lower.tail = FALSE)*2
pnorm((.55-.5)/sqrt(.25/400).01,0,1,lower.tail = FALSE)*2
pnorm((.55-.5)/sqrt(.25/400)\,0,1,lower.tail = FALSE)*2
pnorm((.55-.5)/sqrt(.25/400),0,1,lower.tail = FALSE)*2
pnorm((.5475-.5)/sqrt(.25/400),0,1,lower.tail = FALSE)*2
Rcpp::sourceCpp('Dropbox/project/waveletspine/waveletspline/src/WaveletSpline.cpp')
Rcpp::sourceCpp('Dropbox/project/waveletspine/waveletspline/src/WaveletSpline.cpp')
q()
View(B)
View(f)
View(hat)
View(M)
View(Phi)
View(Psi)
440.6-475
(440.6-475)/(59.2/sqrt(15))
?pt
pt((440.6-475)/(59.2/sqrt(15)),14)
。7785-。8
.7785-.8
(.7785-.8)/sqrt(.16/1225)
sqrt(.16/1225)
# generate data
set.seed(1000)
nSample = 50
obsT = runif(nSample, -10, 40)
lambdaSeq = seq(1000, 8000, by = 10)
lambdaSeq = seq(500, 9000, by = 10)
Psi = waveletObj$compute_wavelet(lambdaSeq)
spclist = list()
for(i in 1:nSample){
Phi = splineObj$compute_spline(obsT[i])
spc_flux = Psi %*% CTrue %*% Phi + rnorm(length(lambdaSeq), sd = 0.1)
spclist = c(spclist, list(cbind(lambdaSeq, spc_flux)))
}
tuningParas = rev(exp(seq(-5,3, length.out = 10)))
tuningParas
knitr::opts_chunk$set(echo = TRUE)
set.seed(1)
n <- 100
x <- runif(n)
y<-3*x+5+rnorm(n)
plot(y~x)
lm1 <- lm(y~x)
summary(lm1)
plot(y~x)
lm1 <- lm(y~x)
summary(lm1)
abline(lm1)
TSS <- (n-1)*var(y)
TSS <- (n-1)*var(y)
RSS <- (n-1)*var(lm1$residuals)
sum( lm1$fitted.values-mean(lm1$fitted.values))^2
TSS <- (n-1)*var(y)
TSS <- (n-1)*var(y)
RSS <- (n-1)*var(lm1$residuals)
ESS <- (n-1)*var(lm1$fitted.values)
sum( lm1$fitted.values-mean(lm1$fitted.values))^2
TSS
RSS
ESS
lm1$fitted.values
sum( (lm1$fitted.values-mean(lm1$fitted.values))^2)
ESS <- (n-1)*var(lm1$fitted.values)
RSS
ESS
abline(lm1,col = "red")
plot(y~x)
lm1 <- lm(y~x)
abline(lm1,col = "red")
mean(y)
mean(lm1$fitted.values)
1-RSS/TSS
ESS/TSS
summary(lm1)$r.square
lm2 <- lm(y~-1+x)
abline(lm2,col="blue")
lm2 <- lm(y~-1+x)
plot(y~x)
abline(lm2,col="blue")
abline(lm1,col="red")
lm2 <- lm(y~-1+x)
plot(y~x)
abline(lm1,col="red")
abline(lm2,col="blue")
TSS <- sum(y-0)^2
TSS <- sum((y-0)^2)
RSS <- sum((lm2$residuals-0)^2)
mean(lm2$fitted.values)
mean(y)
mean(lm2$residuals)
mean(lm1$residuals)
1-RSS/TSS
plot(y~x,xlim=c(0,1),ylim=c(0,10))
abline(lm1,col="red")
abline(lm2,col="blue")
points(mean(x),mean(y))
?points
plot(y~x,xlim=c(0,1),ylim=c(0,10))
abline(lm1,col="red")
abline(lm2,col="blue")
points(mean(x),mean(y))
points(mean(x),mean(y),type = 2)
plot(y~x,xlim=c(0,1),ylim=c(0,10))
abline(lm1,col="red")
abline(lm2,col="blue")
points(mean(x),mean(y),type = 2)
points(mean(x),mean(y),type = "p")
plot(y~x,xlim=c(0,1),ylim=c(0,10))
abline(lm1,col="red")
abline(lm2,col="blue")
points(mean(x),mean(y),type = "p")
plot(y~x,xlim=c(0,1),ylim=c(0,10))
abline(lm1,col="red")
abline(lm2,col="blue")
points(mean(x),mean(y),type = "p",cex = 2)
plot(y~x,xlim=c(0,1),ylim=c(0,10))
abline(lm1,col="red")
abline(lm2,col="blue")
points(mean(x),mean(y),type = "sqaure",cex = 2)
plot(y~x,xlim=c(0,1),ylim=c(0,10))
abline(lm1,col="red")
abline(lm2,col="blue")
points(mean(x),mean(y),type = "p",cex = 2)
ESS <- sum((lm2$fitted.values-0)^2)
1-RSS/TSS
summary(lm1)$r.square
plot(Speclist[[26]][,1],Speclist[[26]][,2],col = cl[1],type = "l",xlim = c(3000,11000),ylim = c(0,80),xlab = "wavelength (rest-frame )",ylab = "flux")
cl = rainbow(length(files),alpha = 0.7)
library(MeanCurve)
infordf = read.table("../MeanCurve2/data/loss_meta.txt",header = TRUE)
write.csv(infordf[1:42,],file = "First75Spectrum")
Speclist = list()
files = list.files("../MeanCurve2/data/LOSSDATA_part/")
for(i in 1:length(files)){
loc_name = files[i]
redshift = infordf[,5][i]
c = infordf[,4][i]
tmp_name = paste0("../MeanCurve2/data/LOSSDATA_part/",loc_name)
tmpdf = as.matrix(read.table(tmp_name))
tmpdf[,1] = tmpdf[,1]/(1+redshift)
tmpdf[,2] = tmpdf[,2]*c
Speclist[[i]] = tmpdf
}
getwd()
install.packages("/Volumes/KINGSTON/bicluster_code/BCEL_1.0.tar.gz", repos = NULL, type = "source")
install.packages("/Volumes/KINGSTON 1/bicluster_code/BCEL_1.0.tar.gz", repos = NULL, type = "source")
libcurlVersion(BCEL)
library(BCEL)
?BiELasso.lambda
?BiELasso_cplus
?which
x <- c(1,2,NA,2)
which(x,NA)
which(x = NA)
dataselectionPath <- "/Users/yanxiaomeng/Dropbox/project/snoopy/pipeline/Data/DataSelection/"
dataselectionFile <- list.files(dataselectionPath)
dataselectionFile
FileI = 1
inputfile_raw <- readLines(dataselectionFile[FileI])
setwd(dataselectionPath)
inputfile_raw <- readLines(dataselectionFile[FileI])
inputfile_raw
infor <- readLines(dataselectionFile[FileI])[1]
infor
gsub(infor,split = " ")
gsub(infor,split = "")
strsplit(infor,split = "")
strsplit(infor,split = " ")
strsplit(infor,split = " ")[[1]]
strsplit(infor,split = " ")[[1]][2]
as.numeric(strsplit(infor,split = " ")[[1]][2])
# Extract the redshift information from the selected supernova Ia
dataselectionPath <- "/Users/yanxiaomeng/Dropbox/project/snoopy/pipeline/Data/DataSelection/"
dataselectionFile <- list.files(dataselectionPath)
setwd(dataselectionPath)
redshiftdf <- data.frame(SNe,Zcmb)
for(FileI in 1:length(dataselectionFile)){
infor <- readLines(dataselectionFile[FileI])[1]
SNe[FileI] <- strsplit(infor,split = " ")[[1]][1]
Zcmb[FileI] <- as.numeric(strsplit(infor,split = " ")[[1]][2])
}
redshiftdf$SNe = SNe
redshiftdf$Zcmb = Zcmb
dataselectionPath <- "/Users/yanxiaomeng/Dropbox/project/snoopy/pipeline/Data/DataSelection/"
dataselectionFile <- list.files(dataselectionPath)
setwd(dataselectionPath)
redshiftdf <- data.frame('SNe','Zcmb')
infor <- readLines(dataselectionFile[FileI])[1]
SNe[FileI] <- strsplit(infor,split = " ")[[1]][1]
Zcmb[FileI] <- as.numeric(strsplit(infor,split = " ")[[1]][2])
dataselectionPath <- "/Users/yanxiaomeng/Dropbox/project/snoopy/pipeline/Data/DataSelection/"
dataselectionFile <- list.files(dataselectionPath)
setwd(dataselectionPath)
redshiftdf <- data.frame('SNe','Zcmb')
SNe <- rep(0,length(dataselectionFile))
Zcmb <- rep(0,length(dataselectionFile))
infor <- readLines(dataselectionFile[FileI])[1]
SNe[FileI] <- strsplit(infor,split = " ")[[1]][1]
Zcmb[FileI] <- as.numeric(strsplit(infor,split = " ")[[1]][2])
redshiftdf$SNe = SNe
redshiftdf$Zcmb = Zcmb
redshiftdf
redshiftdf = data.frame(SNe = SNe,Zcmb = Zcmb)
redshiftdf
dataselectionPath <- "/Users/yanxiaomeng/Dropbox/project/snoopy/pipeline/Data/DataSelection/"
dataselectionFile <- list.files(dataselectionPath)
setwd(dataselectionPath)
SNe <- rep(0,length(dataselectionFile))
Zcmb <- rep(0,length(dataselectionFile))
for(FileI in 1:length(dataselectionFile)){
infor <- readLines(dataselectionFile[FileI])[1]
SNe[FileI] <- strsplit(infor,split = " ")[[1]][1]
Zcmb[FileI] <- as.numeric(strsplit(infor,split = " ")[[1]][2])
}
redshiftdf = data.frame(SNe = SNe,Zcmb = Zcmb)
redshiftdf
write(redshiftdf,file = "/Users/yanxiaomeng/Dropbox/project/snoopy/pipeline/Data/Redshift.csv")
write.csv(redshiftdf,file = "/Users/yanxiaomeng/Dropbox/project/snoopy/pipeline/Data/Redshift.csv")
write.csv(redshiftdf,file = "/Users/yanxiaomeng/Dropbox/project/snoopy/pipeline/Data/Redshift.csv",row.names = FALSE)
